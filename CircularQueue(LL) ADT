╔═══════════════╗
║  Description  ║
╚═══════════════╝
    > Circularly w/Linked Lists
        • Queue implementation
╔══════════════╗
║  Attributes  ║
╚══════════════╝
    > Node
        • Data/Element
        • Next Linked Node
    > Linked List
        • Tail location
        • Size
╔══════════════╗
║  Operations  ║
╚══════════════╝
    > LinkedList
        • Size Of List
        • Empty check
        • Return first
        • dequeue(remove first, FIFO)
        • enqueue(add to back)
        • Rotate (front to back)
╔══════════════╗
║  Complexity  ║
╚══════════════╝
       { O(1), O(log(n)), O(n log(n)), O(n), O(n+k), O(n^2) }
    > Average 
        • Index - None
        • Search - None
        • Insertion - O(1)
        • Deletion - O(1)
    > Worst 
        • Index - None
        • Search - None
        • Insertion - O(1)
        • Deletion - O(1)
    > Memory
        • Space - O(n)
╔════════╗
║  Code  ║
╚════════╝

class CircularQueue:
    """Queue Implementation using circularly linked list for storage"""
    
    #Nested Node Class usually for Linked list
    class _Node():
    
        def __init__(self, data, next): 
            self._data = data
            self._next = next
    
    #Stack Methods    
    def __init__(self):
        self._tail = None
        self._size = 0
        
    def __len__(self):
        return self._size
        
    def is_empty(self):
        """Return true if the queue is empty"""
        return self._size == 0
        
    def first(self):
        """Return the element at front of queue, raise exception if empty"""
        if self.is_empty():
            raise Empty('queue is empty')
        head = self._tail._next
        print(head._data)
        return head._data

    def dequeue(self):
        """Remove and return element at top FIFO
        also raises exception if the stack is empty"""
        if self.is_empty():
            raise Empty('queue is empty')
        oldhead = self._tail._next          #pointer to head
        if self._size == 1:                  #check if ONLY element
            self._tail = None               #queue becomes empty
        else:
            self._tail._next = oldhead._next #bypass the  old head
        self._size -= 1                     #decrement size
        return oldhead._data
            
    
    def enqueue(self, e):
        """Add an element to the bakc of queue"""
        
        newest = self._Node(e, None)         #node will be new tail node
        if self.is_empty():
            newest._next = newest           #initialize circularly
        else:
            newest._next = self._tail._next #new node points to head
            self._tail._next = newest       #old tail points to new node
        self._tail = newest                 #CRITICAL - points tail to your new instance
        self._size += 1
    
    def rotate(self):
        """Rotate front element to the back of the queue."""
        if self._size >0:
            self._tail = self._tail._next    #old head becomes new tail

circInstance=LinkedStack()
circInstance.enqueue(101)
circInstance.dequeue()
