╔═══════════════╗
║  Description  ║
╚═══════════════╝
    > Deque with a Circular Array
        • First in, First out
        
╔══════════════╗
║  Attributes  ║
╚══════════════╝
    • Default Capacity - 10 is moderate
    > ArrayQueue
        • Data
        • Size
        • Front Value

╔══════════════╗
║  Operations  ║
╚══════════════╝
        • Get length
        • Check if empty
        • Return front
        • Pop Front, aka dequeue
        • Add to the back, aka enqueue
        • Auto-resize

╔══════════════╗
║  Complexity  ║
╚══════════════╝
       { O(1), O(log(n)), O(n log(n)), O(n), O(n+k), O(n^2) }
    > Average 
        • Index - O(n)
        • Search - O(n)
        • Insertion - O(1)
        • Deletion - O(1)
    > Worst 
        • Index
        • Search
        • Insertion
        • Deletion
    > Memory
        • Space
        
╔══════════╗
║  Design  ║
╚══════════╝

╔═════╗╔═════╗╔═════╗╔═════╗╔═════╗╔═════╗   
║  5  ║║  4  ║║  3  ║║  2  ║║  1  ║║  5  ║ 
╚═════╝╚═════╝╚═════╝╚═════╝╚═════╝╚═════╝ 


╔════════╗
║  Code  ║

class ArrayQueue:
    """FIFO Stack implementation using a python list as underlying storage."""
    
    DEFAULT_CAPACITY = 5   #moderate capacity
    
    def __init__(self):
        """Create an empty stack."""
        self._data = [None] * ArrayQueue.DEFAULT_CAPACITY    #nonpublic list instance
        self._size = 0
        self._front = 0
        
    def __len__(self):
        return self._size
    
    def is_empty(self):
        return len(self._size) == 0
    
    def first(self):
        return self._data[self._front]
    
    def dequeue(self):
        """Remove and return first element FIFO"""
        if self.is_empty():
            raise Empty('Stack is empty mofo')
        answer = self._data[self._front]
        self.data[self._front] = None  #helpGarbColl 
        self._front = (self._front + 1) % (self.data)
        self._size -= 1
        return answer
            
    def enqueue(self, e):
        """ add an element to back of queue """
        if self._size == len(self._data):
            self._resize(2*len(self._data))
        avail = (self._front + self._size) % len(self._data)
        self._data[avail] = e
        self._size += 1
        
    def _resize(self, cap):
        """Resize to a new list of capacity >= len(self)"""
        old = self._data
        self._data = [None] * cap
        walk = self._front
        for k in range(self._size):
            self._data[k] = old[walk]
            walk = (1 + walk) % len(old)
        self._front = 0
