
╔═══════════════╗
║  Description  ║
╚═══════════════╝
    > Dynamic Arrays
        • Akin to a simplified Python List
╔══════════════╗
║  Attributes  ║
╚══════════════╝
    > Empty Array
        • Count of Elements
        • Capacity
        • Low-level array?
╔══════════════╗
║  Operations  ║
╚══════════════╝
    > Main
        • Get Length 
        • Get element at index K
        • Add object to end of array
        • Resize capacity
        • Make Array
╔══════════════╗
║  Complexity  ║
╚══════════════╝
       { O(1), O(log(n)), O(n log(n)), O(n), O(n+k), O(n^2) }
    > Average 
        • Index 
        • Search
        • Insertion
        • Deletion
    > Worst 
        • Index
        • Search
        • Insertion
        • Deletion
    > Memory
        • Space
╔════════╗
║  Code  ║
╚════════╝

import ctypes

class DynamicArray:

    def __init__(self):
      self._n = 0
      self._capacity = 1
      self._A = self._make_array(self._capacity)
  
    def __len(self):
        return self._n
    
    def __getitem__(self, k
    
    
    def insert(self, k):
        if self._n == self._capacity:       #check if enough room
            self._resize(2 * self._capacity) #double capacity
        for j in range(self._n, k, -1):     #shift rightmost first
            self._A[j] = self._A[j-1]
        self._A[k] = value                  #store newest element
        self._n +=1
    
    def remove(self, value)
    """Remove first occurence of value"""
        for k in range(self._n):
            if self._A[k] == value:
                for j in range(k, self._n - 1):
                    self._A[j] = self._A[j+1]
                self._A[self._n-1] = None
                self._n -= 1
                return
        raise ValueError('value not found')
